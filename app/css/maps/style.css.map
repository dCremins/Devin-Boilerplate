{"version":3,"sources":["style.scss","molecules/_type.scss","atoms/_variables.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_function.scss","atoms/_accessibility.scss","molecules/_base.scss","organisms/_container.scss","../../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","organisms/_nav.scss"],"names":[],"mappings":"AAEA,iEAAY;AACZ,gEAAY;ACHZ;EACE,eCC8B;EDA9B,kCC4CkC,ED3CnC;;AAED;;;EAGE,+BCqC2B;EDpC3B,eEKgD,EFJjD;;ACYC;EACE,eApB4B,EAiC7B;EAdD;IAII,eAxB0B,EAyB3B;EALH;IAQI,eA5B0B,EA6B3B;EATH;IAYI,eAhC0B,EAiC3B;;ADpBL;EAEE,oBEHgD;EFIhD,uBAAmB,EACpB;;AAED;EAEE,qBETgD;EFUhD,uBAAmB,EACpB;;AAED;EAEE,qBEfgD;EFgBhD,uBAAmB,EACpB;;AAED;EAEE,qBErBgD;EFsBhD,uBAAmB,EACpB;;AAED;EAEE,qBE3BgD;EF4BhD,iBAAkB,EACnB;;AAED;EAEE,qBEjCgD;EFkChD,uBAAkB,EACnB;;AAED;EACE,eGgBiC,EHflC;;AIrDD;;EAEE,0BHA8B;EGC9B,aAAY;EACZ,YAAW,EACZ;;AAED;EACE,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,6BAAsB;EAAtB,8BAAsB;MAAtB,2BAAsB;UAAtB,uBAAsB,EAqBvB;EAvBD;;IAMI,0BHV4B;IGW5B,qBAAc;QAAd,eAAc,EACf;EARH;IAWI,0BHd4B;IGe5B,oBAAc;QAAd,mBAAc;YAAd,eAAc;IACd,YAAW,EASZ;IAtBH;MAgBM,iBAAgB;MAChB,eAAc;MACd,yBAAwB;MACxB,UAAS;MACT,mBAAkB,EACnB;;AC5BL;EACE,+BAAsB;UAAtB,uBAAsB;EACtB,eAAc;EACd,mBAAkB;EAClB,YAAW,EAKZ;ECuDG;IDhEJ;MAOI,WAAU,EAEb,EAAA;;AAGD;EACE,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,+BAAmB;EAAnB,8BAAmB;MAAnB,wBAAmB;UAAnB,oBAAmB,EAKpB;EAPD;IAKI,oBAAO;QAAP,YAAO;YAAP,QAAO,EACR;;AElBH;EACE,+BAAsB;UAAtB,uBAAsB;EACtB,YAAW;EACX,eAAc,EA8Bf;ED+BG;IChEJ;MAMI,WAAU;MACV,gBAAe,EA0BlB,EAAA;EAjCD;IAWI,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,0BAA8B;QAA9B,uBAA8B;YAA9B,+BAA8B;IAC9B,+BAAmB;IAAnB,8BAAmB;QAAnB,wBAAmB;YAAnB,oBAAmB;IACnB,iBAAgB;IAChB,UAAS;IACT,WAAU,EACX;EAjBH;IAoBI,kBAAiB,EAKlB;IAzBH;MAuBM,eAAc,EACf;ENFH;IACE,eAnB4B,EAgC7B;IAdD;MAII,eAxB0B,EAyB3B;IALH;MAQI,eA5B0B,EA6B3B;IATH;MAYI,eAhC0B,EAiC3B;EMnCL;IA6BI,eAAc;IACd,mBAAkB;IAClB,sBAAqB,EACtB","file":"../style.css","sourcesContent":["// Google Fonts\n// Comment out if unused\n@import url('https://fonts.googleapis.com/css?family=Unica+One');\n@import url('https://fonts.googleapis.com/css?family=Vollkorn');\n\n// For Media Queries\n// http://breakpoint-sass.com/\n@import \"breakpoint\";\n\n// For Modular Font Sizing\n// http://www.modularscale.com/\n@import \"modularscale\";\n\n// The SCSS scructure is a variation on\n// Atomic Design by Brad Frost\n// http://bradfrost.com/blog/post/atomic-web-design/\n\n// Atoms are pieces of SCSS that only effect the styling indirectly\n@import \"atoms/accessibility\";\n@import \"atoms/variables\";\n\n// Molecules are base level styles\n@import \"molecules/type\";\n@import \"molecules/base\";\n\n// Organisms are particular instances of elements on a page\n@import \"organisms/container\";\n@import \"organisms/nav\";\n","%headers {\n  color: $header;\n  font-family: $header-font;\n}\n\nbody,\na,\np {\n  font-family: $base-font;\n  font-size: ms(0);\n}\n\n// Main Link Style\n@include linx($secondary-color, $brand-color, $brand-color, $brand-color);\n\nh1 {\n  @extend %headers;\n  font-size: ms(6);\n  margin: ms(-8) auto;\n}\n\nh2 {\n  @extend %headers;\n  font-size: ms(5);\n  margin: ms(-6) auto;\n}\n\nh3 {\n  @extend %headers;\n  font-size: ms(4);\n  margin: ms(-4) auto;\n}\n\nh4 {\n  @extend %headers;\n  font-size: ms(3);\n  margin: ms(-2) auto;\n}\n\nh5 {\n  @extend %headers;\n  font-size: ms(2);\n  margin: ms(0) auto;\n}\n\nh6 {\n  @extend %headers;\n  font-size: ms(1);\n  margin: ms(2) auto;\n}\n\n.subtitle {\n  color: $subtitle;\n}\n","// Colors\n\n$brand-color:            #415865 !default;\n$secondary-color:        #7a9eb1 !default;\n$accent-color:           #f9f8eb !default;\n$text:                   #000 !default;\n$container-color:        $accent-color;\n\n// Accessibility Text Adjustments\n$text:                   color-compliance($accent-color, $text);\n$background-text:        color-compliance($container-color, $brand-color);\n$secondary-text:         color-compliance($secondary-color, $text);\n$header:                 color-compliance($container-color, $brand-color);\n$subtitle:               color-compliance($container-color, $secondary-color);\n\n$inverse:                color-compliance($accent-color, $text);\n$background-inverse:     color-compliance($container-color, $brand-color);\n$secondary-inverse:      color-compliance($secondary-color, $text);\n\n\n// Links\n@mixin linx ($link, $visit, $hover, $active) {\n  a {\n    color: $link;\n\n    &:visited {\n      color: $visit;\n    }\n\n    &:hover {\n      color: $hover;\n    }\n\n    &:active {\n      color: $active;\n    }\n  }\n}\n\n// Type\n$modularscale: (\n  base: 1em,\n  ratio: $minor-second\n);\n\n$base-font: 'Vollkorn', serif !default;\n$header-font:   'Unica One', cursive !default;\n","@function ms-function($v: 0, $base: false, $ratio: false, $thread: false, $settings: $modularscale) {\n\n  // Parse settings\n  $ms-settings: ms-settings($base,$ratio,$thread,$settings);\n  $base: nth($ms-settings, 1);\n  $ratio: nth($ms-settings, 2);\n\n  // Render target values from settings.\n  @if unit($ratio) != '' {\n    $ratio: ms-target($ratio,$base)\n  }\n\n  // Fast calc if not multi stranded\n  @if(length($base) == 1) {\n    @return ms-round-px(ms-pow($ratio, $v) * $base);\n  }\n\n  // Create new base array\n  $ms-bases: nth($base,1);\n\n  // Normalize base values\n  @for $i from 2 through length($base) {\n    // initial base value\n    $ms-base: nth($base,$i);\n    // If the base is bigger than the main base\n    @if($ms-base > nth($base,1)) {\n      // divide the value until it aligns with main base.\n      @while($ms-base > nth($base,1)) {\n        $ms-base: $ms-base / $ratio;\n      }\n      $ms-base: $ms-base * $ratio;\n    }\n    // If the base is smaller than the main base.\n    @elseif ($ms-base < nth($base,1)) {\n      // pump up the value until it aligns with main base.\n      @while $ms-base < nth($base,1) {\n        $ms-base: $ms-base * $ratio;\n      }\n    }\n    // Push into new array\n    $ms-bases: append($ms-bases,$ms-base);\n  }\n\n  // Sort array from smallest to largest.\n  $ms-bases: ms-sort($ms-bases);\n\n  // Find step to use in calculation\n  $vtep: floor($v / length($ms-bases));\n  // Find base to use in calculation\n  $ms-base: round(($v / length($ms-bases) - $vtep) * length($ms-bases)) + 1;\n\n  @return ms-round-px(ms-pow($ratio, $vtep) * nth($ms-bases,$ms-base));\n}","\n@import \"math-pow\";\n\n$black:  #000;\n$white:  #fff;\n\n@function luminance($color) {\n  $colors: (\n    \"red\": red($color),\n    \"green\": green($color),\n    \"blue\": blue($color)\n  );\n\n  @each $name, $value in $colors {\n    $adjusted: 0;\n    $value: $value / 255;\n\n    @if $value < .03928 {\n      $value: $value / 12.92;\n    } @else {\n      $value: ($value + .055) / 1.055;\n      $value: poly-pow($value, 2.4);\n    }\n\n    $colors: map-merge($colors, ($name: $value));\n  }\n\n  $results: (map-get($colors, \"red\") * .2126);\n  $results: $results + (map-get($colors, \"green\") * .7152) + (map-get($colors, \"blue\") * .0722);\n  @return  $results;\n}\n\n@function color-compliance($base, $text) {\n  $lum-a: luminance($base);\n  $lum-b: luminance($text);\n  $new-text: $text;\n  $i: 0;\n  $contrast: 0;\n\n  @if $lum-a > $lum-b {\n    $contrast: ($lum-a + .05) / ($lum-b + .05);\n  } @else {\n    $contrast: ($lum-b + .05) / ($lum-a + .05);\n  }\n\n  @while $contrast < 4.5 {\n    $i: $i + 1;\n    $new-text: alter-color($lum-a, $new-text);\n    $lum-b: luminance($new-text);\n    @if $lum-a > $lum-b {\n      $contrast: ($lum-a + .05) / ($lum-b + .05);\n    } @else {\n      $contrast: ($lum-b + .05) / ($lum-a + .05);\n    }\n    @if $i > 10 {\n      @warn \"Infinite Loop, Contrast: #{$contrast}\";\n      @return $new-text;\n    }\n  }\n\n  @return $new-text;\n\n}\n\n@function alter-color($lum, $color) {\n  @if $lum < .15 {\n    @return $white;\n  } @elseif $lum > .3 {\n    $new-color: darken($color, 10%);\n    @return $new-color;\n  } @else {\n    $new-color: lighten($color, 10%);\n    @return $new-color;\n  }\n}\n","html,\nbody {\n  background-color: $brand-color;\n  height: 100%;\n  width: 100%;\n}\n// Sticky Footer\nbody {\n  display: flex;\n  flex-direction: column;\n\n  header,\n  footer {\n    background-color: $secondary-color;\n    flex-shrink: 0; // 2\n  }\n\n  main {\n    background-color: $container-color;\n    flex: 1 0 auto; // 2\n    width: 100%;\n\n    &::after {\n      content: \"\\00a0\"; // &nbsp;\n      display: block;\n      margin-top: var(--space);\n      height: 0;\n      visibility: hidden;\n    }\n  }\n}\n",".container {\n  box-sizing: border-box;\n  margin: 0 auto;\n  padding: 20px 30px;\n  width: 100%;\n\n  @include breakpoint(700px) {\n    width: 80%;\n  }\n}\n\n// Flex Boxes\n.flex {\n  display: flex;\n  flex-flow: row wrap;\n\n  .column {\n    flex: 1;\n  }\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","nav {\n  box-sizing: border-box;\n  width: 100%;\n  margin: 0 auto;\n\n  @include breakpoint(700px) {\n    width: 80%;\n    padding: 0 30px;\n  }\n\n  ul {\n    display: flex;\n    justify-content: space-between;\n    flex-flow: row wrap;\n    list-style: none;\n    margin: 0;\n    padding: 0; \n  }\n\n  li {\n    margin-left: 10px;\n\n    &:first-child {\n      margin-left: 0;\n    }\n  }\n\n  @include linx($accent-color, $brand-color, $brand-color, $brand-color);\n  a {\n    display: block;\n    padding: 15px 20px;\n    text-decoration: none;\n  }\n}\n"]}